@page "/devices/create"
@using Models
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Créer un poste</PageTitle>

<h3>Créer un nouveau poste de travail</h3>

<EditForm Model="device" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="parkSelect" class="form-label">Parc</label>
        <select class="form-select" @bind="device.ParkId" id="parkSelect">
            <option value="">-- Sélectionner un parc --</option>
            @foreach (var park in parks)
            {
            <option value="@park.Id">@park.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="roomSelect" class="form-label">Salle</label>
        <select class="form-select" @bind="device.RoomId" id="roomSelect">
            <option value="">-- Sélectionner une salle --</option>
            @foreach (var room in rooms)
            {
            <option value="@room.Id">@room.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="macAddress" class="form-label">Adresse MAC</label>
        <input type="text" class="form-control" id="macAddress" @bind="device.MacAddress" />
    </div>

    <div class="mb-3">
        <label for="name" class="form-label">Nom</label>
        <input type="text" class="form-control" id="name" @bind="device.Name" />
    </div>

    <button type="submit" class="btn btn-primary">Créer</button>
</EditForm>


@code {
    private Device device = new Device();
    private List<Park>? parks;
    private List<Room>? rooms;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            parks = await HttpClient.GetFromJsonAsync<List<Park>>("api/parks");
            rooms = await HttpClient.GetFromJsonAsync<List<Room>>("api/rooms");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur lors du chargement des parcs et salles : " + ex.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/devices", new
            {
                parkId = device.ParkId,
                roomId = device.RoomId,
                macAddress = device.MacAddress,
                name = device.Name,
            });
            
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/devices");
            }
            else
            {
                Console.WriteLine("Échec de la création du poste : " + response.ReasonPhrase);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur lors de la soumission : " + ex.Message);
        }
    }
}
